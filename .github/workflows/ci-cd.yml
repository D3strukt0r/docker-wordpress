name: CI/CD

env:
  IMAGE_NAME_PHP: wordpress-php
  IMAGE_NAME_NGINX: wordpress-nginx

on:
  push:
    branches:
      - master
      - develop
    paths:
      - .github/workflows/ci-cd.yml
      - 'nginx/**'
      - 'php/**'
      - '**/Dockerfile'

  pull_request:

  workflow_dispatch:

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set variables
        run: |
          # Change all uppercase to lowercase
          echo "::set-env name=IMAGE_ID_PHP::$(echo "${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME_PHP" | tr '[A-Z]' '[a-z]')"
          echo "::set-env name=IMAGE_ID_NGINX::$(echo "${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME_NGINX" | tr '[A-Z]' '[a-z]')"

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" = 'master' ] && VERSION=latest
          [ "$VERSION" = 'develop' ] && VERSION=nightly

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          echo "::set-env name=VERSION::$VERSION"

      - name: Build PHP image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME_PHP --target php

      - name: Build Nginx image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME_NGINX --target nginx

      - name: Log into registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push PHP image to Docker Hub
        run: |
          docker tag $IMAGE_NAME_PHP $IMAGE_ID_PHP:$VERSION
          docker push $IMAGE_ID_PHP:$VERSION

      - name: Push Nginx image to Docker Hub
        run: |
          docker tag $IMAGE_NAME_NGINX $IMAGE_ID_NGINX:$VERSION
          docker push $IMAGE_ID_NGINX:$VERSION
